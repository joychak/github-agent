name: Agent

on:
  # schedule:
    # Run every hour # TODO: modify to every week
    # - cron: '0 * * * *'
  issues:
    types: [opened, edited, closed, reopened, assigned, unassigned, labeled, unlabeled]
  issue_comment:
    types: [created, edited, deleted]
  pull_request:
    types: [opened, closed, edited, reopened, synchronize, ready_for_review]
  pull_request_review:
    types: [submitted, edited]
  discussion:
    types: [created, edited, answered, unanswered, category_changed, labeled, unlabeled, transferred, pinned, unpinned, locked, unlocked]
  discussion_comment:
    types: [created, edited, deleted]
  pull_request_review_comment:
    types: [created, edited]
  workflow_dispatch:
    inputs:
      message:
        description: 'Message to pass to the agent'
        required: false
        default: 'What are my active issues?'
        type: string
      task:
        description: 'Specific task for the agent to perform'
        required: false
        type: string
      system_prompt:
        description: 'Additional system prompt instructions'
        required: false
        type: string
      tools:
        description: 'Comma-separated list of tools to enable for the agent'
        required: false
        default: 'current_time,http_request,load_tool,python_repl,shell,think,file_read,file_write,editor,use_agent,environment,memory,retrieve,use_aws'
        type: string
      provider:
        description: 'Model provider'
        default: "bedrock"
        required: false
        type: choice
        options:
          - bedrock
          - openai
          - github
          - anthropic
          - litellm
          - llamaapi
      model:
        description: 'Model ID'
        default: "us.anthropic.claude-sonnet-4-20250514-v1:0"
        required: false
        type: string
      max_tokens:
        description: 'Max tokens'
        default: "32768"
        required: false
        type: string
      temperature:
        description: 'Temperature (0.0-1.0)'
        default: "1"
        required: false
        type: string

permissions: write-all

jobs:
  check-permissions:
    runs-on: ubuntu-latest
    outputs:
      authorized: ${{ steps.check.outputs.authorized }}
    steps:
      - name: Check user authorization
        id: check  
        run: |
          # 🔐 CONFIGURE AUTHORIZED USERS HERE
          # Add your authorized usernames (comma-separated)
          AUTHORIZED_USERS="${{ secrets.AUTHORIZED_USERS }}"
          
          echo "Checking authorization for user: ${{ github.actor }}"
          
          # Check if the triggering user is in the authorized list
          if [[ ",$AUTHORIZED_USERS," == *",${{ github.actor }},"* ]]; then
            echo "✅ User ${{ github.actor }} is authorized"
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "❌ User ${{ github.actor }} is NOT authorized"
            echo "Authorized users: $AUTHORIZED_USERS"
            echo "authorized=false" >> $GITHUB_OUTPUT
          fi

  run-internal-agent:
    needs: check-permissions
    runs-on: ubuntu-latest
    # Only run if user is authorized
    if: needs.check-permissions.outputs.authorized == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }} # Remove this line if you don't want to give additional credentials

      - name: Run Strands Agent
        uses: ./
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }} # Remove this line if you don't want to give additional credentials
          STRANDS_ADDITIONAL_REQUEST_FIELDS: '{"anthropic_beta": ["interleaved-thinking-2025-05-14", "context-1m-2025-08-07"], "thinking": {"type": "enabled", "budget_tokens": 2048}}'
        with:
          task: |
            ${{ 
              github.event.inputs.task ||
              github.event.inputs.message ||
              'Handle manual request from authorized user'
            }}

          # Model configuration
          provider: ${{ github.event.inputs.provider || vars.STRANDS_PROVIDER || 'bedrock' }}
          model: ${{ github.event.inputs.model || vars.STRANDS_MODEL_ID || 'us.anthropic.claude-sonnet-4-20250514-v1:0' }}
          max_tokens: ${{ github.event.inputs.max_tokens || vars.STRANDS_MAX_TOKENS || '32768' }}
          temperature: ${{ github.event.inputs.temperature || vars.STRANDS_TEMPERATURE || '1' }}

          # System prompt configuration
          system_prompt: |
            ${{ github.event.inputs.system_prompt || vars.SYSTEM_PROMPT || 'You are a restricted GitHub agent for this repository, powered by Strands Agents SDK. Only authorized users can trigger your execution.' }}

            ${{ vars.INPUT_SYSTEM_PROMPT }}

          # Tool configuration
          tools: ${{ github.event.inputs.tools || vars.STRANDS_TOOLS || 'current_time,editor,file_read,file_write,http_request,python_repl,shell,think,create_subagent,system_prompt,fetch_github_tool,use_github,list_issues,list_pull_requests,add_comment,retrieve,store_in_kb' }}

          # Authentication
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # AWS configuration
          aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}
          aws_region: ${{ secrets.AWS_REGION || 'us-west-2' }}

          # OpenAI configuration
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}

          # GitHub configuration
          github_api_key: ${{ secrets.GITHUB_API_KEY }}

          # Anthropic configuration  
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # LiteLLM configuration
          litellm_api_key: ${{ secrets.LITELLM_API_KEY }}
          litellm_base_url: ${{ secrets.LITELLM_BASE_URL }}

          # LlamaAPI configuration
          llamaapi_api_key: ${{ secrets.LLAMAAPI_API_KEY }}

          # Knowledge base
          knowledge_base_id: ${{ secrets.STRANDS_KNOWLEDGE_BASE_ID }}

          # Advanced configuration
          thinking_type: ${{ vars.STRANDS_THINKING_TYPE || 'enabled' }}
          budget_tokens: ${{ vars.STRANDS_BUDGET_TOKENS || 2048 }}
          bypass_tool_consent: "true"

          # Slack integration
          slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack_app_token: ${{ secrets.SLACK_APP_TOKEN }}

          # Observability
          langfuse_public_key: ${{ secrets.LANGFUSE_PUBLIC_KEY }}
          langfuse_secret_key: ${{ secrets.LANGFUSE_SECRET_KEY }}
          langfuse_host: ${{ secrets.LANGFUSE_HOST }}

  unauthorized-notice:
    needs: check-permissions
    runs-on: ubuntu-latest
    # Only run if user is NOT authorized
    if: needs.check-permissions.outputs.authorized == 'false'
    steps:
      - name: Unauthorized access attempt
        run: |
          echo "🚫 UNAUTHORIZED ACCESS ATTEMPT"
          echo "User: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Time: $(date)"
          echo ""
          echo "This incident has been logged."
          echo "Contact repository administrators for access."
          exit 1
