name: 'Strands GitHub Agent'
description: 'AI-powered GitHub agent using Strands Agents SDK for autonomous repository management'
author: 'Strands Agents'

branding:
  icon: 'bot'
  color: 'blue'

inputs:
  # Core Task Configuration
  task:
    description: 'Specific task for the agent to perform'
    required: true
  
  system_prompt:
    description: 'Additional system prompt instructions for the agent'
    required: false
    default: ''
  
  # Model Configuration
  provider:
    description: 'Model provider (bedrock, openai, github, anthropic, litellm, llamaapi)'
    required: false
    default: 'bedrock'
  
  model:
    description: 'Model ID to use'
    required: false
    default: 'us.anthropic.claude-sonnet-4-20250514-v1:0'
  
  max_tokens:
    description: 'Maximum tokens for the model'
    required: false
    default: '32768'
  
  temperature:
    description: 'Temperature for model generation (0.0-1.0)'
    required: false
    default: '1'
  
  # Tool Configuration
  tools:
    description: 'Comma-separated list of tools to enable'
    required: false
    default: 'current_time'
  
  # Authentication & Access
  github_token:
    description: 'GitHub token for API access'
    required: false
    default: ${{ github.token }}
  
  # AWS Configuration (for Bedrock)
  aws_region:
    description: 'AWS region for Bedrock'
    required: false
    default: 'us-west-2'
  
  aws_role_arn:
    description: 'AWS role ARN for OIDC authentication'
    required: false
  
  # OpenAI Configuration (if using OpenAI provider)
  openai_api_key:
    description: 'OpenAI API key'
    required: false
  
  # GitHub Configuration (if using GitHub provider)
  github_api_key:
    description: 'GitHub API key (defaults to github_token if not provided)'
    required: false
  
  # Anthropic Configuration (if using Anthropic provider)
  anthropic_api_key:
    description: 'Anthropic API key'
    required: false
  
  # LiteLLM Configuration (if using LiteLLM provider)
  litellm_api_key:
    description: 'LiteLLM API key'
    required: false
  
  litellm_base_url:
    description: 'LiteLLM base URL'
    required: false
  
  # LlamaAPI Configuration (if using LlamaAPI provider)
  llamaapi_api_key:
    description: 'LlamaAPI API key'
    required: false
  
  # Knowledge Base Configuration
  knowledge_base_id:
    description: 'Strands Knowledge Base ID for memory'
    required: false
  
  # Advanced Configuration
  thinking_type:
    description: 'Type of thinking mode (enabled, disabled)'
    required: false
    default: 'enabled'
  
  budget_tokens:
    description: 'Budget tokens for thinking mode'
    required: false
    default: '2048'
  
  bypass_tool_consent:
    description: 'Skip tool consent prompts'
    required: false
    default: 'true'
  
  # Slack Integration (optional)
  slack_bot_token:
    description: 'Slack bot token for notifications'
    required: false
  
  slack_app_token:
    description: 'Slack app token for Socket Mode'
    required: false
  
  # Observability
  langfuse_public_key:
    description: 'Langfuse public key for observability'
    required: false
  
  langfuse_secret_key:
    description: 'Langfuse secret key for observability'
    required: false
  
  langfuse_host:
    description: 'Langfuse host URL'
    required: false

  # Agent Runner Configuration
  agent_runner:
    description: 'URL to custom agent_runner.py script. Falls back to repository variable AGENT_RUNNER, then default gist'
    required: false

outputs:
  result:
    description: 'Result from the agent execution'
  
  success:
    description: 'Whether the agent execution was successful'
  
  error:
    description: 'Error message if execution failed'

runs:
  using: 'composite'
  steps:
    - name: Use Homebrew Python 3.10
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "/opt/homebrew/opt/python@3.10/libexec/bin" >> $GITHUB_PATH
        echo "/opt/homebrew/bin" >> $GITHUB_PATH

    - name: Set up Python
      if: runner.os != 'macOS'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-strands-agents-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-strands-agents-
          ${{ runner.os }}-pip-

    - name: Install Strands Agents
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Local Dependencies
      if: runner.os == 'macOS'
      shell: bash
      run: |
        pip install -r requirements-local.txt

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "Strands Agent"
        git config --global user.email "217235299+strands-agent@users.noreply.github.com"

    - name: Configure AWS credentials
      if: inputs.aws_role_arn != ''
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws_role_arn }}
        role-session-name: GitHubActions-StrandsAgent-${{ github.run_id }}
        aws-region: ${{ inputs.aws_region }}
        mask-aws-account-id: true

    - name: Download agent script
      shell: bash
      env:
        # GitHub Configuration - Priority: Input > Repository Variable > Default Gist
        AGENT_RUNNER: ${{ inputs.agent_runner || 'https://gist.githubusercontent.com/cagataycali/13875192bd1f892192e8c63be635ed4e/raw/0f06bdb2d4039c2bc768ec699efe2f058a59c947/agent_runner.py' }}
      run: |
        curl -o agent_runner.py $AGENT_RUNNER

    - name: Run Strands Agent
      shell: bash
      env:
        # GitHub Configuration
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_CONTEXT: ${{ toJson(github) }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_ACTOR: ${{ github.actor }}
        
        # Model Configuration
        STRANDS_PROVIDER: ${{ inputs.provider }}
        STRANDS_MODEL_ID: ${{ inputs.model }}
        STRANDS_MAX_TOKENS: ${{ inputs.max_tokens }}
        STRANDS_TEMPERATURE: ${{ inputs.temperature }}
        STRANDS_THINKING_TYPE: ${{ inputs.thinking_type }}
        STRANDS_BUDGET_TOKENS: ${{ inputs.budget_tokens }}
        
        # Tool Configuration
        STRANDS_TOOLS: ${{ inputs.tools }}
        BYPASS_TOOL_CONSENT: ${{ inputs.bypass_tool_consent }}
        STRANDS_TOOL_CONSOLE_MODE: "enabled"
        
        # Task Configuration
        INPUT_TASK: ${{ inputs.task }}
        INPUT_SYSTEM_PROMPT: ${{ inputs.system_prompt }}
        
        # AWS Configuration
        AWS_REGION: ${{ inputs.aws_region }}
        
        # OpenAI Configuration
        OPENAI_API_KEY: ${{ inputs.openai_api_key }}
        
        # GitHub Configuration
        GITHUB_API_KEY: ${{ inputs.github_api_key || inputs.github_token }}
        
        # Anthropic Configuration
        ANTHROPIC_API_KEY: ${{ inputs.anthropic_api_key }}
        
        # LiteLLM Configuration
        LITELLM_API_KEY: ${{ inputs.litellm_api_key }}
        LITELLM_BASE_URL: ${{ inputs.litellm_base_url }}
        
        # LlamaAPI Configuration
        LLAMAAPI_API_KEY: ${{ inputs.llamaapi_api_key }}
        
        # Knowledge Base
        STRANDS_KNOWLEDGE_BASE_ID: ${{ inputs.knowledge_base_id }}
        
        # Slack Configuration
        SLACK_BOT_TOKEN: ${{ inputs.slack_bot_token }}
        SLACK_APP_TOKEN: ${{ inputs.slack_app_token }}
        
        # Observability
        LANGFUSE_PUBLIC_KEY: ${{ inputs.langfuse_public_key }}
        LANGFUSE_SECRET_KEY: ${{ inputs.langfuse_secret_key }}
        LANGFUSE_HOST: ${{ inputs.langfuse_host }}
      run: |
        AGENT_INPUT="$INPUT_TASK"
        
        echo "ü§ñ Starting Strands Agent..."
        echo "üìù Task: $AGENT_INPUT"
        echo "üß† Model: $STRANDS_MODEL_ID"
        echo "üîß Tools: $STRANDS_TOOLS"
        
        # Run the agent
        python agent_runner.py "$AGENT_INPUT"
